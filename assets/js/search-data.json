{
  
    
        "post0": {
            "title": "Lesson on "if" Statements",
            "content": "if statements are used to run a method based on if something specifically described happens. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { System.out.println(x + &quot; is greater than &quot; + y); } . Enter the first number: 18.0 Enter the second number: 9.8 18.0 is greater than 9.8 . if-else -- if the specific condition is true then proceed below and run the method BUT if the condition is false then proceed with the different set of instructions defined . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { System.out.println(x + &quot; is greater than &quot; + y); } else { System.out.println(y + &quot; is greater than &quot; + x); } . Enter the first number: 4.0 Enter the second number: 19.0 19.0 is greater than 4.0 . if-elseif-else -- if the specific condition is true then proceed below and run the method BUT if the condition is not met try the next condition and if the condition is met run this code segment now if both of the conditions are false then proceed with the different set of instructions defined . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { System.out.println(x + &quot; is greater than &quot; + y); } else if (x == y) { System.out.println(x + &quot; is equal to &quot; + y); } else { System.out.println(y + &quot; is greater than &quot; + x); } . Enter the first number: 9.3 Enter the second number: 9.3 9.3 is equal to 9.3 . Create and if-elseif-elseif-elsif-else statement, 5 or more conditions. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (operator == &#39;+&#39;) { System.out.println(x + y); } else if (operator == &#39;-&#39;) { System.out.println(x - y); } else if (operator == &#39;*&#39;) { System.out.println(x * y); } else if (operator == &#39;/&#39;) { System.out.println(x / y); } else { System.out.println(&quot;Invalid operator&quot;); } . Enter the first number: 33.8 Enter the operator (+,-,*,/): * Enter the second number: 8.7 294.05999999999995 . Covert the 5 or more decisions to a switch-case-case-case-case-otherwise. . double num1, num2; // Take input from the user Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter the first number: &quot;); // take the inputs num1 = scanner.nextDouble(); System.out.println(num1); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter second number: &quot;); num2 = scanner.nextDouble(); System.out.println(num2); double output = 0; switch (operator) { // case to add two numbers case &#39;+&#39;: output = num1 + num2; break; // case to subtract two numbers case &#39;-&#39;: output = num1 - num2; break; // case to multiply two numbers case &#39;*&#39;: output = num1 * num2; break; // case to divide two numbers case &#39;/&#39;: output = num1 / num2; break; default: System.out.println(&quot;Invalid input&quot;); break; } System.out.println(&quot;The final result: &quot;); // print the final result System.out.println(num1 + &quot; &quot; + operator + &quot; &quot; + num2 + &quot; = &quot; + output); . Enter the first number: 44.0 Enter the operator (+,-,*,/): / Enter second number: 4.0 The final result: 44.0 / 4.0 = 11.0 . De Morgan&#39;s Law . In the 1800s, Augustus De Morgan created the DeMorgan laws. They demonstrate how to handle a complicated conditional negation, which is a conditional statement that has several conditions connected by and (&amp;&amp;), or (||), or (||), such as (x 3) &amp;&amp; (y &gt; 2). . The same as &quot;not a&quot; or &quot;not (a and b)&quot; (not b). This is written as! in Java. (a &amp;&amp; b) == ! a || ! b . The equivalent of not (a or b) is not (a) and (not b). This is written as! in Java. (a || b) == ! a &amp;&amp; ! b . The negation modifies each conditional: . &lt; becomes &gt;= . &gt; becomes &lt;= . == becomes != . &lt;= becomes &gt; . = becomes &lt; . != becomes == . public class DeMorgansAndTest { public static void main(String[] args) { int x = 6; int y = 3; System.out.println(!(x &gt; 6 &amp;&amp; y &lt; 3)); // prints true if x is not &gt; 6 OR y is not &lt; 3 // prints false otherwise // this output should be true as x IS &gt; 6 BUT y IS NOT &lt; 3 } } DeMorgansAndTest.main(null) . true . public class DeMorgansOrTest { public static void main(String[] args) { int x = 0; int y = 5; System.out.println(!(x &lt; 3 || y &gt; 2)); // prints true if x is not &lt; 3 AND y is not &gt; 2 // prints false otherwise // this output should be false as x IS &gt; 3 AND y IS &gt; 2 } } DeMorgansOrTest.main(null) . false .",
            "url": "https://evanyang24.github.io/APCSA/2022/09/11/if-statements.html",
            "relUrl": "/2022/09/11/if-statements.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Focus and Habits",
            "content": "Goals/Focuses . -Box Karthik . -Drive the Nutmobile . -Have alot of money . -Be a famous Chemist . Focus and Habits . I Had taken away that I need to avoid depression because it is not good | Like in the video it had explained how College students get depressed often and I had compared that to Del Norte in how many of our students get depressed as well. | I had believed that this is such a big problem that I had decided to try to major in psychology and at least taking AP Psychology in highschool. Psychology Notes . . | .",
            "url": "https://evanyang24.github.io/APCSA/markdown/2022/09/11/FocusandHabits.html",
            "relUrl": "/markdown/2022/09/11/FocusandHabits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Focus/Habits",
            "content": "Focus and Habits . I Had taken away that I need to avoid depression because it is not good | Like in the video it had explained how College students get depressed often and I had compared that to Del Norte in how many of our students get depressed as well. | I had believed that this is such a big problem that I had decided to try to major in psychology and at least taking AP Psychology in highschool. Psychology Notes . | .",
            "url": "https://evanyang24.github.io/APCSA/markdown/2022/09/11/Focus-and-Habits.html",
            "relUrl": "/markdown/2022/09/11/Focus-and-Habits.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lessons on "if" statements",
            "content": "Lessons on “if” statements . If Statements .",
            "url": "https://evanyang24.github.io/APCSA/markdown/2022/09/11/if-statements.html",
            "relUrl": "/markdown/2022/09/11/if-statements.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Code.Org with Key Learning",
            "content": "Code.Org with Key Learning . Key Learning with Code.Org -Creating a Right Turn/Extends . -Loops with PainterPlus . Two Way Selection Statements (Move South) | . | .",
            "url": "https://evanyang24.github.io/APCSA/markdown/2022/09/05/code.org-key-learning.html",
            "relUrl": "/markdown/2022/09/05/code.org-key-learning.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Week 2 Using Objects",
            "content": "Hacks . Issue . Fastpages . Java Objects Notebook | . Code.org Learning (1-15 Done) .",
            "url": "https://evanyang24.github.io/APCSA/markdown/2022/09/04/Week-2-Using-Objects.html",
            "relUrl": "/markdown/2022/09/04/Week-2-Using-Objects.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Evan's Week 2 Java Objects Notebook",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers import java.io.*; // library for input output classes import java.io.File; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes public static final String ANSI_RESET = &quot; u001B[0m&quot;; public static final String ANSI_BLACK = &quot; u001B[30m&quot;; public static final String ANSI_RED = &quot; u001B[31m&quot;; public static final String ANSI_GREEN = &quot; u001B[32m&quot;; public static final String ANSI_YELLOW = &quot; u001B[33m&quot;; public static final String ANSI_BLUE = &quot; u001B[34m&quot;; public static final String ANSI_PURPLE = &quot; u001B[35m&quot;; public static final String ANSI_CYAN = &quot; u001B[36m&quot;; public static final String ANSI_WHITE = &quot; u001B[37m&quot;; // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Math&quot;); System.out.println(&quot;2 - Physics&quot;); System.out.println(&quot;3 - English&quot;); System.out.println(&quot;4 - Evan &gt; Karthik in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) throws Exception { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Cya!&quot;); quit = true; break; case 1: System.out.println(&quot;Math Calculator: &quot;); // stores two numbers double num1, num2; // Take input from the user Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter the first number: &quot;); // take the inputs num1 = scanner.nextDouble(); System.out.println(num1); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter second number: &quot;); num2 = scanner.nextDouble(); System.out.println(num2); double output = 0; switch (operator) { // case to add two numbers case &#39;+&#39;: output = num1 + num2; break; // case to subtract two numbers case &#39;-&#39;: output = num1 - num2; break; // case to multiply two numbers case &#39;*&#39;: output = num1 * num2; break; // case to divide two numbers case &#39;/&#39;: output = num1 / num2; break; default: System.out.println(&quot;Invalid input&quot;); break; } System.out.println(&quot;The final result: &quot;); // print the final result System.out.println(num1 + &quot; &quot; + operator + &quot; &quot; + num2 + &quot; = &quot; + output); System.out.println(); System.out.println(ANSI_RED + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 2: System.out.println(&quot;Physics (F = m*a) Calculator&quot;); // force calcultor // initialize scanner input Scanner input; // initialize integers to be used for the input and to be displayed at the very end double force = 0.0; double mass = 0.0; double acceleration = 0.0; // initialize strings to be used for the input and to be displayed at the very end String finalString; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter force(kg): &quot;); try { mass = input.nextDouble(); System.out.println(mass); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter acceleration(m/s²): &quot;); try { acceleration = input.nextDouble(); System.out.println(acceleration); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // math operation for finding force = mass x acceleration force = mass * acceleration; // final formatted string with both variables finalString = &quot;force(N) = &quot; + force; System.out.println(finalString); System.out.println(); System.out.println(ANSI_YELLOW + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 3: System.out.print(&quot;English Spell Checker...&quot;); Scanner write = new Scanner(System.in); System.out.println(&quot;Enter a sentence and the program will check if you made any spelling mistakes or if the word is not in the dictionary: &quot;); String sentence = write.nextLine(); System.out.println(sentence); String[] splitSentence = sentence.split(&quot; &quot;); for(int i = 0; i &lt; splitSentence.length; i++) { Scanner read = new Scanner(new File(&quot;dictionary.txt&quot;)); boolean found = false; while(read.hasNextLine()) { String compare = read.nextLine(); if(compare.equalsIgnoreCase(splitSentence[i])) { System.out.println(splitSentence[i] + &quot; : correct&quot;); found=true; break; } } if(!found) System.out.println(splitSentence[i] + &quot; : incorrect&quot;); } System.out.println(); System.out.println(ANSI_BLUE + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 4: for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot; Evan &gt; Karthik &quot;); } System.out.println(); System.out.println(); System.out.println(ANSI_WHITE + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Math 2 - Physics 3 - English 4 - Evan &gt; Karthik in color 0 - Quit - 3: English Spell Checker...Enter a sentence and the program will check if you made any spelling mistakes or if the word is not in the dictionary: i dont aprove of apple pie i : correct dont : incorrect aprove : incorrect of : correct apple : correct pie : correct Enter Another option from the menu: 4: Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Evan &gt; Karthik Enter Another option from the menu: 2: Physics (F = m*a) Calculator Enter force(kg): 3.0 Enter acceleration(m/s²): 19.0 force(N) = 57.0 Enter Another option from the menu: 1: Math Calculator: Enter the first number: 8.0 Enter the operator (+,-,*,/): / Enter second number: 2.0 The final result: 8.0 / 2.0 = 4.0 Enter Another option from the menu: 0: Cya! .",
            "url": "https://evanyang24.github.io/APCSA/2022/09/04/Java-Objects-Jupyter-Notebook.html",
            "relUrl": "/2022/09/04/Java-Objects-Jupyter-Notebook.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Week 1 Innovation - Primitives",
            "content": "Hacks . Issue . Part 1 Fastpages . Bash Notebook | Java Primitives Notebook | . Code.org Learning . ”### Capture information that will grow to 10 CB Units” . View the daily highlights on CollegeBoard. | Capture essential code segments into unit-organized Jupyter notebooks. | Practice AP questions and multiple choice questions throughout the year, but more so as the AP test date approaches. | CollegeBoard work is more important for the AP test, and PBLs can aid if CollegeBoard core concepts are applied. | . “As AP Test date gets closer I will:” . Determine my strengths and limitations; | practice MC questions to make my shortcomings into my strengths by looking over both old and fresh information. -Take entire practice tests and practice FRQs. | .",
            "url": "https://evanyang24.github.io/APCSA/markdown/2022/08/28/week-1.html",
            "relUrl": "/markdown/2022/08/28/week-1.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Primitives Notebook",
            "content": "import java.util.Scanner; public class CeltToFaren { public static void main(String[] args) { Scanner input; double Faren = 0.0; double Cels = 0.0; String FinalOutput; boolean correctDouble; input = new Scanner(System.in); System.out.print(&quot;Enter a temperature in Celsius: &quot;); try { Cels = input.nextDouble(); System.out.println(Cels); correctDouble = true; } catch (Exception e) { correctDouble = false; } input.close(); Faren = ((Cels * 9) / 5) + 32; FinalOutput = Cels + &quot; degrees celsius is equal to &quot; + Faren + &quot; degrees farenheit&quot;; System.out.println( Cels + &quot; degrees celsius is equal to &quot; + Faren + &quot; degrees farenheit&quot;); } } CeltToFaren.main(null); . Enter a temperature in Celsius: 8.0 8.0 degrees celsius is equal to 46.4 degrees farenheit .",
            "url": "https://evanyang24.github.io/APCSA/2022/08/28/Primitive.html",
            "relUrl": "/2022/08/28/Primitive.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Bash Notebook",
            "content": "python --version python2 --version echo &quot;&quot; java --version javac --version echo &quot;&quot; conda --version conda list | grep &quot;jupyter&quot; echo &quot;&quot; jupyter --version jupyter kernelspec list echo &quot;&quot; npm -version . Python 3.9.12 Python 2.7.18 openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 conda 4.14.0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/psych-24/.local/share/jupyter/kernels/bash java /home/psych-24/.local/share/jupyter/kernels/java javascript /home/psych-24/.local/share/jupyter/kernels/javascript python3 /home/psych-24/.local/share/jupyter/kernels/python3 3.10.10 .",
            "url": "https://evanyang24.github.io/APCSA/2022/08/22/BashNotebook.html",
            "relUrl": "/2022/08/22/BashNotebook.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "TT 1.0.0 Tools and Equipment",
            "content": "Hacks . Issue . Part 1 Fastpages . Python Jupyter Notebook | Java Jupyter Notebook | . | Github Insights for APCSA | Github Insights for CSA Project | . Part 2 Java Project . . Spring Portfolio Commit | . Issue .",
            "url": "https://evanyang24.github.io/APCSA/markdown/2022/08/21/Tools-and-Equipment.html",
            "relUrl": "/markdown/2022/08/21/Tools-and-Equipment.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Python Notebook",
            "content": "print(&quot;Hello World&quot;) print(&quot;Evan&#39;s Python Notebook&quot;) . Hello World Evan&#39;s Python Notebook .",
            "url": "https://evanyang24.github.io/APCSA/2022/08/21/Python-Jupyter-Notebook.html",
            "relUrl": "/2022/08/21/Python-Jupyter-Notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Java Notebook",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://evanyang24.github.io/APCSA/2022/08/21/Java-Jupyter-Notebook.html",
            "relUrl": "/2022/08/21/Java-Jupyter-Notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://evanyang24.github.io/APCSA/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://evanyang24.github.io/APCSA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://evanyang24.github.io/APCSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://evanyang24.github.io/APCSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}